#!/sbin/sh
##########################################################################################
#
# OpenSSH for Magisk
# by tombriden
#
##########################################################################################

MODNAME=openssh

# Installer paths
INSTALLER=/tmp/$MODNAME

MODPATH=/magisk/$MODNAME

##########################################################################################
# Flashable update-binary preparation
##########################################################################################

OUTFD=$2
ZIP=$3

readlink /proc/$$/fd/$OUTFD 2>/dev/null | grep /tmp >/dev/null
if [ "$?" -eq "0" ]; then
  OUTFD=0

  for FD in `ls /proc/$$/fd`; do
    readlink /proc/$$/fd/$FD 2>/dev/null | grep pipe >/dev/null
    if [ "$?" -eq "0" ]; then
      ps | grep " 3 $FD " | grep -v grep >/dev/null
      if [ "$?" -eq "0" ]; then
        OUTFD=$FD
        break
      fi
    fi
  done
fi

mkdir -p $INSTALLER
cd $INSTALLER
unzip -o "$ZIP"

##########################################################################################
# Functions
##########################################################################################

ui_print() {
  echo -n -e "ui_print $1\n" >> /proc/self/fd/$OUTFD
  echo -n -e "ui_print\n" >> /proc/self/fd/$OUTFD
}

is_mounted() {
  if [ ! -z "$2" ]; then
    cat /proc/mounts | grep $1 | grep $2, >/dev/null
  else
    cat /proc/mounts | grep $1 >/dev/null
  fi
  return $?
}

set_perm() {
  chown $2:$3 $1 || exit 1
  chmod $4 $1 || exit 1
  if [ "$5" ]; then
    chcon $5 $1 2>/dev/null
  else
    chcon 'u:object_r:system_file:s0' $1 2>/dev/null
  fi
}

grep_prop() {
  REGEX="s/^$1=//p"
  shift
  FILES=$@
  if [ -z "$FILES" ]; then
    FILES='/system/build.prop'
  fi
  cat $FILES 2>/dev/null | sed -n $REGEX | head -n 1
}

payload_size_check() {
  reqSizeM=0;
  for entry in $(unzip -l "$@" 2>/dev/null | tail -n +4 | awk '{ print $1 }'); do
    test $entry != "--------" && reqSizeM=$((reqSizeM + entry)) || break;
  done;
  test $reqSizeM -lt 1048576 && reqSizeM=1 || reqSizeM=$((reqSizeM / 1048576));
}

target_size_check() {
  e2fsck -p -f $1
  curBlocks=`e2fsck -n $1 2>/dev/null | cut -d, -f3 | cut -d\  -f2`;
  curUsedM=$((`echo "$curBlocks" | cut -d/ -f1` * 4 / 1024));
  curSizeM=$((`echo "$curBlocks" | cut -d/ -f2` * 4 / 1024));
  curFreeM=$((curSizeM - curUsedM));
}

##########################################################################################
# Main
##########################################################################################

ui_print "********************************"
ui_print " OpenSSH (Magisk Version)       "
ui_print "********************************"

ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

if [ ! -d "$INSTALLER/common" ]; then
  ui_print "! Failed: Unable to extract zip file!"
  exit 1
fi

ui_print "- Mounting /system(ro), /vendor(ro), /data, /cache"
mount -o ro /system 2>/dev/null
mount -o ro /vendor 2>/dev/null
mount /data 2>/dev/null
mount /cache 2>/dev/null

if [ ! -f '/system/build.prop' ]; then
  ui_print "! Failed: /system could not be mounted!"
  exit 1
fi

API=$(grep_prop ro.build.version.sdk)
ABI=$(grep_prop ro.product.cpu.abi | cut -c-3)
ABI2=$(grep_prop ro.product.cpu.abi2 | cut -c-3)
ABILONG=$(grep_prop ro.product.cpu.abi)

ARCH=arm
IS64BIT=
if [ "$ABI" = "x86" ]; then ARCH=x86; fi;
if [ "$ABI2" = "x86" ]; then ARCH=x86; fi;
if [ "$ABILONG" = "arm64-v8a" ]; then ARCH=arm64; IS64BIT=1; fi;
if [ "$ABILONG" = "x86_64" ]; then ARCH=x64; IS64BIT=1; fi;

umount /magisk 2>/dev/null
mkdir /magisk 2>/dev/null

IMG=

if (is_mounted /data); then
  IMG=/data/magisk.img
  if [ ! -f "$IMG" ]; then
    ui_print "! Magisk is not installed!"
    ui_print "! Magisk is required for this mod!"
    exit 1
  fi
else
  IMG=/cache/magisk.img
  if [ ! -f "$IMG" ]; then
    ui_print " "
    ui_print "***********************************"
    ui_print "*      !! Data unavalible !!      *"
    ui_print "* Magisk detection is impossible  *"
    ui_print "* Installation will still proceed *"
    ui_print "*  But please make sure you have  *"
    ui_print "*        Magisk installed!!       *"
    ui_print "***********************************"
    ui_print " "
  fi
fi

payload_size_check "$ZIP" "*"

if [ -f "$IMG" ]; then
  ui_print "- $IMG detected!"
  target_size_check $IMG
  if [ "$reqSizeM" -gt "$curFreeM" ]; then
    SIZE=$((((reqSizeM + curUsedM) / 32 + 2) * 32))
    ui_print "- Resizing $IMG to ${SIZE}M..."
    resize2fs $IMG ${SIZE}M
  fi
else
  SIZE=$(((reqSizeM / 32 + 2) * 32));
  ui_print "- Creating $IMG with size ${SIZE}M"
  make_ext4fs -l ${SIZE}M -a /magisk -S $INSTALLER/common/file_contexts_image $IMG
fi

ui_print "- Mounting $IMG to /magisk"
LOOPDEVICE=
for LOOP in 0 1 2 3 4 5 6 7; do
  if (! is_mounted /magisk); then
    LOOPDEVICE=/dev/block/loop$LOOP
    if [ ! -f "$LOOPDEVICE" ]; then
      mknod $LOOPDEVICE b 7 $LOOP
    fi
    losetup $LOOPDEVICE $IMG
    if [ "$?" -eq "0" ]; then
      mount -t ext4 -o loop $LOOPDEVICE /magisk
      if (! is_mounted /magisk); then
        /system/bin/toolbox mount -t ext4 -o loop $LOOPDEVICE /magisk
      fi
      if (! is_mounted /magisk); then
        /system/bin/toybox mount -t ext4 -o loop $LOOPDEVICE /magisk
      fi
    fi
    if (is_mounted /magisk); then
      break;
    fi
  fi
done

mkdir -p $MODPATH/system/lib64/ 2>/dev/null
rm -rf $MODPATH/system/lib 2>/dev/null
mkdir -p $MODPATH/system/bin/ 2>/dev/null
mkdir -p $MODPATH/system/xbin/ 2>/dev/null

touch $UPDATE
touch $MODPATH/auto_mount

# Copy files
ui_print "- Copying files"
cp -af $INSTALLER/system/lib64/* $MODPATH/system/lib64/
cp -af $INSTALLER/system/bin/* $MODPATH/system/bin/
cp -af $INSTALLER/system/xbin/* $MODPATH/system/xbin/

cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh
cp -af $INSTALLER/module.prop $MODPATH/module.prop

##########################################################################################

ui_print "- Unmounting partitions"

umount /magisk
umount /system
umount /vendor 2>/dev/null
losetup -d $LOOPDEVICE

# Shrink the image if possible
target_size_check $IMG
NEWDATASIZE=$(((curUsedM / 32 + 2) * 32));
if [ "$curSizeM" -gt "$NEWDATASIZE" ]; then
  ui_print "- Shrinking $IMG to ${NEWDATASIZE}M...";
  resize2fs $IMG ${NEWDATASIZE}M;
fi

ui_print "- Done"
exit 0
